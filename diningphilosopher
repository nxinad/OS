v#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <pthread.h>

#define NUM_PHILOSOPHERS 5
#define NUM_CHOPSTICKS 5

pthread_mutex_t chopsticks[NUM_CHOPSTICKS];

void* philosopher(void* philosopher_id) {
    int left_chopstick = (int)(intptr_t)philosopher_id;
    int right_chopstick = (left_chopstick + 1) % NUM_PHILOSOPHERS;

    while (1) {
        printf("Philosopher %d is thinking.\n", left_chopstick);
        sleep(1);

        // Pick up chopsticks
        pthread_mutex_lock(&chopsticks[left_chopstick]);
        pthread_mutex_lock(&chopsticks[right_chopstick]);

        printf("Philosopher %d is eating.\n", left_chopstick);
        sleep(1);

        // Put down chopsticks
        pthread_mutex_unlock(&chopsticks[right_chopstick]);
        pthread_mutex_unlock(&chopsticks[left_chopstick]);
    }

    return NULL;
}

int main() {
    pthread_t philosophers[NUM_PHILOSOPHERS];

    // Initialize the mutexes (chopsticks)
    for (int i = 0; i < NUM_CHOPSTICKS; i++) {
        pthread_mutex_init(&chopsticks[i], NULL);
    }

    // Create philosopher threads
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_create(&philosophers[i], NULL, philosopher, (void*)(intptr_t)i);
    }

    // Wait for philosopher threads to finish (This will not happen in this example)
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }

    // Destroy the mutexes (chopsticks)
    for (int i = 0; i < NUM_CHOPSTICKS; i++) {
        pthread_mutex_destroy(&chopsticks[i]);
    }

    return 0;
}
